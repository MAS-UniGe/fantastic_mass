[       
      {
        "frameworkMasExtension": 2,
        "projectName": "Rv4JaCa - runtime verification for multi-agent systems",
        "description": "Rv4JaCa is a Runtime Verification approach for Multi-Agent Systems using the JaCaMo framework. KEYWORDS: Runtime Verification; JaCaMo; Runtime Monitoring Language, RML",
        "projectType": "Agent-oriented software engineering, verification",
        "keyPhrases": [
            "Runtime Verification",
            "JaCaMo",
            "Runtime Monitoring Language, RML",
            ""
        ],
        "extensionURL": "https://github.com/DeboraEngelmann/RV4JaCa",
        "extensionCommunityAvailability": "Yes, the source code is available",
        "extensionPreviousVersionsAvailability": "No",
        "extensionPreviousVersionsURL": "",
        "extensionLicense": "Open source",
        "extensionListOfBugs": "No",
        "extensionOfFramework": "JaCaMo version 0.9",
        "extensionLinkToExtendedFramework": "https://jacamo.sourceforge.net/",
        "extensionRealApplication": "No",
        "extensionDocumentation": "No",
        "extensionTechnicalAssistance": "debora.engelmann@acad.pucrs.br",
        "extensionDependecies": "Java 11; Gradle 6.8.3; JaCaMo 0.9; RML (https://rmlatdibris.github.io/)",
        "extensionTesting": "Yes, some tests were performed but no testing resources exist",
        "extensionTestingResources": "",
        "extensionSoftwareEngineeringApproach": "",
        "extensionPrimaryPaper": "Engelmann, D.C., Ferrando, A., Panisson, A.R., Ancona, D., Bordini, R.H., Mascardi, V.: Rv4JaCa - runtime verification for multi-agent systems. In: Cardoso, R.C., Ferrando, A., Papacchini, F., Askarpour, M., Dennis, L.A. (eds.) Proceedings of the Second Workshop on Agents and Robots for reliable Engineered Autonomy, AREA@IJCAI-ECAI 2022, Vienna, Austria, 24th July 2022. EPTCS, vol. 362, pp. 23-36 (2022). https://doi.org/10.4204/EPTCS.362.5",
        "extensionSecondaryPaper": "",
        "comments": ""
    },
    {
        "frameworkMasExtension": 1,
        "projectName": "Affective Agents",
        "description": "Pedestrian Simulation with Affective State Modeling. KEYWORDS: Human interaction simulation.",
        "projectType": "Agent-based simulation",
        "keyPhrases": [
            "Pedestrian Simulation",
            "Affective State Modeling",
            "Multiagent System",
            "Human interaction simulation"
        ],
        "masURL": "https://gitlab.com/daniela.briola/affectiveagents",
        "masCommunityAvailability": "Yes, the source code is available",
        "masPreviousVersionsAvailability": "No",
        "masPreviousVersionsURL": "",
        "masLicense": "Creative Commons Attribution-NonCommercial 4.0 Licence",
        "masListOfBugs": "No",
        "masDevelopedWithFramework": "NetLogo",
        "masLinkToFramework": "https://ccl.northwestern.edu/netlogo/, version 6.2.0",
        "masFrameworkVersion": "",
        "masRealApplication": "This is a new project, by now it is only used for the developers' research",
        "masDocumentation": "Manuals",
        "masTechnicalAssistance": "daniela.briola@unimib.it",
        "masDependencies": "No need, it is self contained",
        "masTesting": "Yes, some tests were performed but no testing resources exist",
        "masTestingResources": "",
        "masSoftwareEngineeringApproach": "No",
        "masPrimaryPaper": "Marta Giltri, Stefania Bandini, Francesca Gasparini, Daniela Briola: Furthering an Agent-Based Modeling Approach Introducing Affective States Based on Real Data. ATT@IJCAI 2022: pp 124-136",
        "masSecondaryPaper": "Stefania Bandini, Daniela Briola, Alberto Dennunzio, Francesca Gasparini, Marta Giltri, Giuseppe Vizzari: Integrating the Implications of Distance-Based Affective States in Cellular Automata Pedestrian Simulation. ACRI 2022: pp 259-270",
        "comments": ""
    },
     {
        "frameworkMasExtension": 0,
        "projectName": "Jadescript",
        "description": "An imperative, event-driven, agent-oriented programming language for agents and multi-agent systems based on JADE. KEYWORDS: Mainstream-oriented language and tools for agents and multi-agent systems",
        "projectType": "Agent-oriented software engineering, programming language",
        "keyPhrases": [
            "A programming language for agents and multi-agent systems based on JADE",
            "Imperative, event-driven, agent-oriented programming",
            "Mainstream-oriented language and tools for agents and multi-agent systems",
            ""
        ],
        "frameworkURL": "https://github.com/aiagents/jadescript",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "frameworkPreviousVersionsURL": "",
        "frameworkLicense": "LGPL-3.0",
        "frameworkListOfBugs": "Yes",
        "frameworkRealApplication": "Not aware of any user",
        "frameworkDocumentation": "Manuals",
        "frameworkTechnicalAssistance": "The support is provided via Github messaging and bug tracking",
        "frameworkDependecies": "Recent Eclipse",
        "frameworkTesting": "Yes, a systematic testing following some recognized testing methodology/approach was performed and the testing resources (test cases, etc) are available in the public repository;",        
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "Informal agile methodology",
        "frameworkPrimaryPaper": "Federico Bergenti, Giovanni Caire, Stefania Monica, Agostino Poggi. The first twenty years of agent-based software development with JADE. Autonomous Agents and Multi-Agent Systems, 34(2):36, 2020",
        "frameworkSecondaryPaper": "Federico Bergenti, Stefania Monica, Giuseppe Petrosino. A scripting language for practical agent-oriented programming. In Proceedings of the 8th ACM SIGPLAN International Workshop on Programming Based on Actors, Agents, and Decentralized Control (AGERE 2018), pp. 62--71, ACM, 2018",
        "frameworkMasBuiltUsingFramework":"",
        "comments": ""
     },
     {
        "frameworkMasExtension": 2,
        "projectName": "LEARN: a p2p layer for JADE MASs",
        "description": "LEARN enables the execution of collaborative scenarios in a fully decentralized way by combining the agent-based paradigm, well suited to design collaborative and autonomous nodes, and the peer-to-peer paradigm, well suited to design distributed and dynamic network infrastructures. KEYWORDS: p2p, JADE",
        "projectType": "Agent-oriented software engineering",
        "keyPhrases": [
            "p2p",
            "JADE",
            "multiagent system",
            "peer to peer"
        ],
        "extensionURL": "https://gitlab.com/daniela.briola/p2p-layer-for-jade",
        "extensionCommunityAvailability": "Yes, the source code is available",
        "extensionPreviousVersionsAvailability": "No",
        "extensionPreviousVersionsURL": "",
        "extensionLicense": "Creative Commons Attribution-NonCommercial 4.0 Licence",
        "extensionListOfBugs": "No",
        "extensionOfFramework": "JADE version 4.4",
        "extensionLinkToExtendedFramework": "https://jade.tilab.com/",
        "extensionRealApplication": "No",
        "extensionDocumentation": "Manuals",
        "extensionTechnicalAssistance": "daniela.briola@unimib.it",
        "extensionDependecies": "Log4J and Opencvs. All these jars are included in the zipfile",
        "extensionTesting": "Yes, some tests were performed but no testing resources exist",
        "extensionTestingResources": "",
        "extensionSoftwareEngineeringApproach": "",
        "extensionPrimaryPaper": "https://onlinelibrary.wiley.com/doi/epdf/10.1002/spe.2657",
        "extensionSecondaryPaper": "",
        "comments": ""
    },
     {
        "frameworkMasExtension": 0,
        "projectName": "JS-son",
        "description": "A Lean, Extensible JavaScript Agent Programming Library. KEYWORDS: Belief-Desire-Intention, BDI, Agents on the Web",
        "projectType": "Agent-oriented software engineering, library",
        "keyPhrases": [
            "JavaScript-based agents",
            "Belief-Desire-Intention",
            "Agents on the Web",
            ""
        ],
        "frameworkURL": "https://github.com/TimKam/JS-son",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "frameworkPreviousVersionsURL": "",
        "frameworkLicense": "BSD 2-Clause 'Simplified' License",
        "frameworkListOfBugs": "Yes",
        "frameworkRealApplication": "Used in a an HCI study that was published in AIJ: https://www.sciencedirect.com/science/article/abs/pii/S0004370221001247",
        "frameworkDocumentation": "Manuals; Tutorials",
        "frameworkTechnicalAssistance": "tkampik@cs.umu.se",
        "frameworkDependecies": "No 3rd-party dependencies are required",
        "frameworkTesting": "Yes, a systematic testing following some recognized testing methodology/approach was performed and the testing resources (test cases, etc) are available in the public repository;",
        "frameworkTestingResources": "https://github.com/TimKam/JS-son/tree/master/spec",
        "frameworkSoftwareEngineeringApproach": "",
        "frameworkPrimaryPaper": "https://link.springer.com/chapter/10.1007/978-3-030-51417-4_11",
        "frameworkSecondaryPaper": "",
        "frameworkMasBuiltUsingFramework":"There are some small MAS openly available, e.g. in the examples",
        "comments": ""
     },
    {
        "frameworkMasExtension": 0,
        "projectName": "MAPF",
        "description": "Software and other information to find effective and collision-free paths for multi-agent or multi-robot systems. KEYWORDS: collision-free path, multi-robot system",
        "projectType": "Path finding",
        "keyPhrases": [
            "collision-free paths",
            "multi-robot systems",
            "",
            ""
        ],
        "frameworkURL": "http://mapf.info/",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "No",
        "frameworkPreviousVersionsURL": "",
        "frameworkLicense": "Depends on the software",
        "frameworkListOfBugs": "No",
        "frameworkRealApplication": "",
        "frameworkDocumentation": "Tutorials; Videos; Courses",
        "frameworkTechnicalAssistance": "No",
        "frameworkDependecies": "",
        "frameworkTesting": "Yes",
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "",
        "frameworkPrimaryPaper": "http://mapf.info/index.php/Main/Publications",
        "frameworkSecondaryPaper": "",
        "frameworkMasBuiltUsingFramework":"See http://mapf.info/",
        "comments": ""
    },
    {
        "frameworkMasExtension": 0,
        "projectName": "Python Intelligent Agent Framework (Piaf)",
        "description": "Fully written in modern Python, FIPA-compliant, extensible and light-weight; uses asynchronous programming behind the woods to power agents",
        "projectType": "Agent-based simulation",
        "keyPhrases": [
            "Uses asynchronous programming behind the woods to power agents",
            "Fully FIPA-compliant framework, extensible and light-weight",
            "",
            ""
        ],
        "frameworkURL": "https://gitlab.com/ornythorinque/piaf",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "frameworkPreviousVersionsURL": "",
        "frameworkLicense": "MIT",
        "frameworkListOfBugs": "Yes",
        "frameworkRealApplication": "No so far",
        "frameworkDocumentation": "",
        "frameworkTechnicalAssistance": "No assistance except Q/A using the issue system",
        "frameworkDependencies": "All dependencies are added when the software is installed. RabbitMQ (https://www.rabbitmq.com/) and/or Redis (https://redis.io/) may be required depending on the developed application.",
        "frameworkTesting": "Yes",
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "TDD, except for the ongoing Web API (but tests will come soon)",
        "frameworkPrimaryPaper": "No paper because I'm not a scientist ;)",
        "frameworkSecondaryPaper": "",
        "frameworkMasBuiltUsingFramework": "No",
        "comments": ""
    },
    {
        "frameworkMasExtension": 0,
        "projectName": "SMASTA+",
        "description": "Scala implementation of the Extended Multi-agents Situated Task Allocation",
        "projectType": "Agent-oriented software engineering, task allocation",
        "keyPhrases": [
            "",
            "",
            "",
            ""
        ],
        "frameworkURL": "https://gitlab.univ-lille.fr/maxime.morge/smastaplus",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "Yes, in another repo",
        "frameworkPreviousVersionsURL": "https://github.com/cristal-smac/mas4data",
        "frameworkLicense": "GNU GPL3",
        "frameworkListOfBugs": "No",
        "frameworkRealApplication": "No",
        "frameworkDocumentation": "",
        "frameworkTechnicalAssistance": "No",
        "frameworkDependencies": "See requirements and dependencies described here https://gitlab.univ-lille.fr/maxime.morge/smastaplus/",
        "frameworkTesting": "Yes",
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "No",
        "frameworkPrimaryPaper": "Ellie Beauprez, Anne-C\u00e9cile Caron, Maxime Morge, Jean-Christophe Routier. A Multi-Agent Negotiation Strategy for Reducing the Flowtime. 13th International Conference on Agents and Artificial Intelligence, Feb 2021, Online streaming, Spain. pp.58-68.",
        "frameworkSecondaryPaper": "",
        "frameworkMasBuiltUsingFramework": "No",
        "comments": ""
    },
    {
        "frameworkMasExtension": 2,
        "projectName": "SUMO-RL ",
        "description": "Simple interface to instantiate Reinforcement Learning environments with SUMO for Traffic Signal Control",
        "projectType": "Agent-based simulation",
        "keyPhrases": [
            "",
            "",
            "",
            ""
        ],
        "extensionURL": "https://github.com/LucasAlegre/sumo-rl",
        "extensionCommunityAvailability": "Yes, the source code is available",
        "extensionPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "extensionPreviousVersionsURL": "",
        "extensionLicense": "MIT",
        "extensionListOfBugs": "No",
        "extensionOfFramework": "SUMO (latest versions)",
        "extensionLinkToExtendedFramework": "https://github.com/eclipse/sumo",
        "extensionRealApplication": "In this link it is possible to check the papers that cite my library: https://scholar.google.com/scholar?oi=bibs&hl=en&cites=6462936269775000752",
        "extensionDocumentation": "Manuals",
        "extensionTechnicalAssistance": "The developers try to provide technical assistance via GitHub Issues on the repository",
        "extensionDependecies": "SUMO",
        "extensionTesting": "Yes",
        "extensionTestingResources": "",
        "extensionSoftwareEngineeringApproach": "The OpenAI Gym API was used https://www.gymlibrary.ml/",
        "extensionPrimaryPaper": "SUMO-RL provides a simple interface to instantiate Reinforcement Learning environments with SUMO for Traffic Signal Control. Goals of this repository:  1) Provide a simple interface to work with Reinforcement Learning for Traffic Signal Control using SUMO 2) Support Multiagent RL 3) Compatibility with gym.Env and popular RL libraries such as stable-baselines3 and RLlib 4) Easy customisation: state and reward definitions are easily modifiable",
        "extensionSecondaryPaper": "",
        "comments": ""
    },
    {
        "frameworkMasExtension": 0,
        "projectName": "ASTRA Programming Language",
        "description": "Agent Oriented Programming Language. KEYWORDS: AgentSpeak(L), TeleReactive",
        "projectType": "Agent-oriented software engineering, programming language",
        "keyPhrases": [
            "AgentSpeak(L)",
            "TeleReactive",
            "",
            ""
        ],
        "frameworkURL": "http://www.astralanguage.com",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "frameworkPreviousVersionsURL": "",
        "frameworkLicense": "MIT License",
        "frameworkListOfBugs": "Yes",
        "frameworkRealApplication": "No",
        "frameworkDocumentation": "",
        "frameworkTechnicalAssistance": "rem.collier@ucd.ie",
        "frameworkDependencies": "Apache Maven",
        "frameworkTesting": "Yes",
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "In the last year, the devlopers formalised the methodology used to follow a more Agile approach with regular sprints. Most bugs/enhancements are recorded in the Gitlab issue tracker and they try to make relatively regular releases when new issues are logged. The Gitflow branching strategy is used to manage development and CI/CD Pipelines are used to automatically push releases to Maven Central.",
        "frameworkPrimaryPaper": "Reflecting on Agent Programming with AgentSpeak(L)",
        "frameworkSecondaryPaper": "Multiple Inheritance in AgentSpeak(L)-style programming languages",
        "frameworkMasBuiltUsingFramework": "Yes",
        "comments": "Some prototypes are available, but they are not yet at the level of maturity that would justify their addition to this repository."
    },
    {
        "frameworkMasExtension": 2,
        "projectName": "Multi-Agent MicroServices (MAMS)",
        "description": "MAMS is an architectural style for integrating multi-agent systems into Microservices architectures. It achieves this by modelling agents as entities that have hypermedia bodies that are exposed as REST APIs. This provides a standard REST API that plain-old microservices can through. KEYWORDS: Microservices Architecture, CArtAgO, Hypermedia Agents",
        "projectType": "Agent-oriented software engineering",
        "keyPhrases": [
            "Microservices Architecture",
            "CArtAgO",
            "",
            ""
        ],
        "extensionURL": "https://gitlab.com/mams-ucd/mams-cartago",
        "extensionCommunityAvailability": "Yes, the source code is available",
        "extensionPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "extensionPreviousVersionsURL": "",
        "extensionLicense": "MIT License",
        "extensionListOfBugs": "Yes",
        "extensionOfFramework": "ASTRA + CArtAgO version 0.3.0",
        "extensionLinkToExtendedFramework": "http://www.astralanguage.com",
        "extensionRealApplication": "In UCD, it is being used to implement a Decision Support tool for Smart Agriculture (CONSUS project), a Data Processing Pipeline for Earth Observation (CAMEO) and as part of a new Hypermedia MAS Simulation framework (ABM).",
        "extensionDocumentation": "Manuals; Examples",
        "extensionTechnicalAssistance": "rem.collier@ucd.ie / Gitlab Issue Tracker",
        "extensionDependecies": "Apache Maven /  CArtAgO / ASTRA / Apache Jena (All libraries / frameworks are managed through Maven)",
        "extensionTesting": "Yes",
        "extensionTestingResources": "",
        "extensionSoftwareEngineeringApproach": "Rapid Prototyping initialally, but more recently the developers are moving to an Agile approach with regular releases based on issues logged in the Gitlab Issue Tracker; the use of the Gitflow branching strategy, and CI/CD automated releases to the Gitlab Maven Repo (they will move to maven central as the project matures)",
        "extensionPrimaryPaper": "MAMS: Multi-Agent MicroServices",
        "extensionSecondaryPaper": "Delivering Multi-agent MicroServices Using CArtAgO",
        "comments": ""
    },
    {
        "frameworkMasExtension": 0,
        "projectName": "Model-Checking Agent Programming Languages (MCAPL) Framework",
        "description": "Verification Framework including several programming languages, most notably Gwendolen. KEYWORDS: BDI, Belief-Desire-Intention, Model-checking, Agent programming language, Autonomous systems",
        "projectType": "Agent-oriented software engineering, verification",
        "keyPhrases": [
            "Beliefs-desires-intentions",
            "Model-checking",
            "Agent programming language",
            "Autonomous systems"
        ],
        "frameworkURL": "https://autonomy-and-verification.github.io/tools/mcapl",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "Yes, in another repo",
        "frameworkPreviousVersionsURL": "https://sourceforge.net/projects/mcapl/",
        "frameworkLicense": "LGPL",
        "frameworkListOfBugs": "No",
        "frameworkRealApplication": "People sometimes contact the developers, but they do not know if anyone is using it currently (apart from the developers' group)",
        "frameworkDocumentation": "Manual and tutorials available in the doc directory of the distribution",
        "frameworkTechnicalAssistance": "louise.dennis@manchester.ac.uk",
        "frameworkDependencies": "JavaPathfinder, Junit, ANTLR, EIS, JPL",
        "frameworkTesting": "Yes",
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "",
        "frameworkPrimaryPaper": "Louise A. Dennis. The MCAPL Framework including the Agent Infrastructure Layer and Agent Java Pathfinder. Journal of Open Source Software, 3(24), 617, 2018. DOI: 10.31105/joss.00617",
        "frameworkSecondaryPaper": "Louise A. Dennis, Michael Fisher, Nicholas K. Lincoln, Alexei Lisitsa, Sandor M. Veres. Practical Verification of Decision-Making in Agent-Based Autonomous Systems . Automated Software Engineering 23(3), 305-359, 2016. DOI: 10.1007/s10515-014-0168-9.",
        "frameworkMasBuiltUsingFramework": "Lots of examples in the examples folder of the repository",
        "comments": "You may have a look at the related ROS-A project under Extensions"
    },
    {
        "frameworkMasExtension": 0,
        "projectName": "STV: StraTegic Verifier",
        "description": "Formal verification. KEYWORDS: Alternating-time temporal logic verification, Incomplete information, Partial-order reductions, Assume-guarantee verification",
        "projectType": "Agent-oriented software engineering, verification",
        "keyPhrases": [
            "Alternating-time temporal logic verification",
            "Incomplete information",
            "Partial-order reductions",
            "Assume-guarantee verification"
        ],
        "frameworkURL": "http://stv.cs-htiew.com/",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "Yes, in another repo",
        "frameworkPreviousVersionsURL": "https://github.com/blackbat13/stv",
        "frameworkLicense": "MIT",
        "frameworkListOfBugs": "No",
        "frameworkRealApplication": "A few PhD students use this tool to develop new models and verification algorithms for various logics.",
        "frameworkDocumentation": "",
        "frameworkTechnicalAssistance": "d.kurpiewski@ipipan.waw.pl",
        "frameworkDependencies": "",
        "frameworkTesting": "Yes",
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "",
        "frameworkPrimaryPaper": "https://arxiv.org/pdf/2203.01033.pdf",
        "frameworkSecondaryPaper": "https://www.ifaamas.org/Proceedings/aamas2021/pdfs/p1770.pdf",
        "frameworkMasBuiltUsingFramework": "Yes",
        "comments": "The framework is not aimed at building MAS, but at verifying them. On the other hand, the tool supports simple input language used to specify MAS. Some examples can be found at https://github.com/blackbat13/stv/tree/master/gui/examples"
    },
    {
        "frameworkMasExtension": 0,
        "projectName": "Equilibrium Verification Environment (EVE)",
        "description": "Nash Equilibrium. KEYWORDS: Game Theory, Verification, Temporal Logic, Synthesis",
        "projectType": "Verification and synthesis",
        "keyPhrases": [
            "Game Theory",
            "Verification",
            "Temporal Logic",
            "Synthesis"
        ],
        "frameworkURL": "https://github.com/eve-mas/eve-parity",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "No",
        "frameworkPreviousVersionsURL": "",
        "frameworkLicense": "GPL-3.0 license",
        "frameworkListOfBugs": "Yes",
        "frameworkRealApplication": "No",
        "frameworkDocumentation": "",
        "frameworkTechnicalAssistance": "mnajeep@gmail.com",
        "frameworkDependencies": "OPAM (https://opam.ocaml.org/doc/Install.html), Cairo (https://cairographics.org/download/), IGraph (http://igraph.org/python/), PGSolver (https://github.com/tcsprojects/pgsolver), LTL2BA (http://www.lsv.fr/~gastin/ltl2ba/)",
        "frameworkTesting": "Yes",
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "",
        "frameworkPrimaryPaper": "Julian Gutierrez, Muhammad Najib, Giuseppe Perelli, Michael Wooldridge, Automated temporal equilibrium analysis: Verification and synthesis of multi-player games, Artificial Intelligence, Volume 287, 2020, 103353, ISSN 0004-3702, https://doi.org/10.1016/j.artint.2020.103353.",
        "frameworkSecondaryPaper": "Julian Gutierrez, Muhammad Najib, Giuseppe Perelli, Michael Wooldridge, EVE: A Tool for Temporal Equilibrium Analysis. Automated Technology for Verification and Analysis. ATVA 2018. https://doi.org/10.1007/978-3-030-01090-4_35",
        "frameworkMasBuiltUsingFramework": "No",
        "comments": ""
    },
    {
        "frameworkMasExtension": 2,
        "projectName": "ROS-A ",
        "description": "An Interface for Programming Verifiable Autonomous Agents in ROS. KEYWORDS: High-level decision-making with rational agents in robotic applications, BDI-based agents in robotic systems developed using ROS",
        "projectType": "Extension for existing programming languages (Jason and Gwendolen)",
        "keyPhrases": [
            "High-level decision-making with rational agents in robotic applications",
            "BDI-based agents in robotic systems developed using ROS",
            "",
            ""
        ],
        "extensionURL": "Jason: https://github.com/rafaelcaue/jason-rosbridge  Gwendolen: https://github.com/autonomy-and-verification-uol/gwendolen-rosbridge",
        "extensionCommunityAvailability": "Yes, the source code is available",
        "extensionPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "extensionPreviousVersionsURL": "",
        "extensionLicense": "GNU GENERAL PUBLIC LICENSE",
        "extensionListOfBugs": "No",
        "extensionOfFramework": "Jason (any version) and Gwendolen (any version)",
        "extensionLinkToExtendedFramework": "Jason: http://jason.sourceforge.net/wp/\nGwedolen: https://github.com/mcapl/mcapl",
        "extensionRealApplication": "No",
        "extensionDocumentation": "Paper, https://link.springer.com/chapter/10.1007/978-3-030-66412-1_13;",
        "extensionTechnicalAssistance": "Yes, through Github repository issues",
        "extensionDependecies": "Besides the agent programming language, ROS is also necessary (any version)",
        "extensionTesting": "Yes",
        "extensionTestingResources": "",
        "extensionSoftwareEngineeringApproach": "",
        "extensionPrimaryPaper": "https://link.springer.com/chapter/10.1007/978-3-030-66412-1_13",
        "extensionSecondaryPaper": "",
        "comments": "You may have a look at the related MCAPL project under Frameworks"
    },
    {
        "frameworkMasExtension": 0,
        "projectName": "SLAPP",
        "description": "A shell shell for agent-based simulation using Python from the pioneer Swarm tool",
        "projectType": "Agent-based simulation",
        "keyPhrases": [
            "Using Python",
            "From the pioneer Swarm tool",
            "",
            ""
        ],
        "frameworkURL": "https://terna.github.io/SLAPP/",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "frameworkPreviousVersionsURL": "",
        "frameworkLicense": "Creative Commons",
        "frameworkListOfBugs": "Yes",
        "frameworkRealApplication": "Coauthors and former students",
        "frameworkDocumentation": "",
        "frameworkTechnicalAssistance": "pietro.terna@unito.it",
        "frameworkDependencies": "Python libs, list at https://github.com/terna/SLAPP3/blob/master/requirements.txt",
        "frameworkTesting": "Yes",
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "OOP",
        "frameworkPrimaryPaper": "Reference a https://terna.github.io/SLAPP3/SLAPP_Reference_Handbook.pdf",
        "frameworkSecondaryPaper": "",
        "frameworkMasBuiltUsingFramework": "Yes",
        "comments": "https://terna.github.io/oligopoly/"
    },
    {
        "frameworkMasExtension": 1,
        "projectName": "Deep Q-Learning Agent for Traffic Signal Control",
        "description": "Reinforcement Learning. KEYWORDS: Traffic control, Agent-based simulation",
        "projectType": "Agent-based simulation",
        "keyPhrases": [
            "Traffic control",
            "Agent-based simulation",
            "",
            ""
        ],
        "masURL": "https://github.com/AndreaVidali/Deep-QLearning-Agent-for-Traffic-Signal-Control",
        "masCommunityAvailability": "Yes, the source code is available",
        "masPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "masPreviousVersionsURL": "",
        "masLicense": "MIT License",
        "masListOfBugs": "No",
        "masDevelopedWithFramework": "The system makes use of SUMO (Simulation of Urban MObility - https://www.dlr.de/ts/en/desktopdefault.aspx/tabid-9883/16931_read-41000/) - that is an agent based simulator, but not a MAS development plarform - for the agent's environment, but the traffic control agent is based on Python and Tensorflow.",
        "masLinkToFramework": "",
        "masFrameworkVersion": "",
        "masRealApplication": "No, the repository has been used by other researchers, and the developers are in the process of extending and sharing it in a different and more structured repository",
        "masDocumentation": "",
        "masTechnicalAssistance": "No",
        "masDependencies": "",
        "masTesting": "Yes",
        "masTestingResources": "",
        "masSoftwareEngineeringApproach": "No",
        "masPrimaryPaper": "http://ceur-ws.org/Vol-2404/paper07.pdf",
        "masSecondaryPaper": "",
        "comments": "The main author of the work is Andrea Vidali, who developed it during his master thesis."
    },
    {
        "frameworkMasExtension": 0,
        "projectName": "BSPL",
        "description": "Interaction protocol adapter. KEYWORDS: Agent development framework, Verification tool",
        "projectType": "Agent-oriented software engineering, verification",
        "keyPhrases": [
            "Agent development framework",
            "Verification tool",
            "",
            ""
        ],
        "frameworkURL": "https://gitlab.com/masr/bspl",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "frameworkPreviousVersionsURL": "",
        "frameworkLicense": "MIT",
        "frameworkListOfBugs": "No",
        "frameworkRealApplication": "No",
        "frameworkDocumentation": "",
        "frameworkTechnicalAssistance": "No",
        "frameworkDependencies": "",
        "frameworkTesting": "Yes",
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "",
        "frameworkPrimaryPaper": "Bungie: Improving Fault Tolerance via Extensible Application-Level Protocols",
        "frameworkSecondaryPaper": "Mandrake: multiagent systems as a basis for programming fault-tolerant decentralized applications",
        "frameworkMasBuiltUsingFramework": "No",
        "comments": ""
    },
    {
        "frameworkMasExtension": 0,
        "projectName": "Deserv",
        "description": "Interaction protocol adapter. KEYWORDS: Agent development framework, AWS Lambda, Python",
        "projectType": "Agent-oriented software engineering, framework",
        "keyPhrases": [
            "Agent development framework",
            "AWS Lambda",
            "Python",
            ""
        ],
        "frameworkURL": "https://gitlab.com/masr/deserv",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "frameworkPreviousVersionsURL": "",
        "frameworkLicense": "MIT",
        "frameworkListOfBugs": "No",
        "frameworkRealApplication": "No",
        "frameworkDocumentation": "",
        "frameworkTechnicalAssistance": "schrist@ncsu.edu",
        "frameworkDependencies": "",
        "frameworkTesting": "Yes",
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "",
        "frameworkPrimaryPaper": "Deserv: Decentralized Serverless Computing",
        "frameworkSecondaryPaper": "Protocols Over Things: A Decentralized Programming Model for the Internet of Things",
        "frameworkMasBuiltUsingFramework": "No",
        "comments": ""
    },
    {
        "frameworkMasExtension": 0,
        "projectName": "Hercule",
        "description": "Declarative contract platform. KEYWORDS: Norm state computation, Unstructured data storage and processing using Hyperledger Fabric and CouchDB",
        "projectType": "Agent-oriented software engineering",
        "keyPhrases": [
            "Norm state computation",
            "Unstructured data storage and processing using Hyperledger Fabric and CouchDB",
            "",
            ""
        ],
        "frameworkURL": "https://gitlab.com/masr/hercule",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "frameworkPreviousVersionsURL": "",
        "frameworkLicense": "MIT",
        "frameworkListOfBugs": "No",
        "frameworkRealApplication": "No",
        "frameworkDocumentation": "",
        "frameworkTechnicalAssistance": "schrist@ncsu.edu",
        "frameworkDependencies": "",
        "frameworkTesting": "Yes",
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "",
        "frameworkPrimaryPaper": "Hercule: Representing and Reasoning About Norms as a Foundation for Declarative Contracts Over Blockchain",
        "frameworkSecondaryPaper": "",
        "frameworkMasBuiltUsingFramework": "No",
        "comments": ""
    },
    {
        "frameworkMasExtension": 1,
        "projectName": "MAPS-HOLO (HOLOnic MultiAgent Parking System)",
        "description": "Holonic Multiagent System. KEYWORDS: Smart parking, JaCaMo",
        "projectType": "Agent-oriented software engineering",
        "keyPhrases": [
            "Smart Parking",
            "JaCaMo",
            "",
            ""
        ],
        "masURL": "https://github.com/lcastropg/maps_holo",
        "masCommunityAvailability": "Yes, the source code is available",
        "masPreviousVersionsAvailability": "Yes, in another repo",
        "masPreviousVersionsURL": "https://github.com/MAPS-UTFPR/MAPS",
        "masLicense": "None",
        "masListOfBugs": "No",
        "masDevelopedWithFramework": "JaCaMo",
        "masLinkToFramework": "http://jacamo.sourceforge.net/",
        "masFrameworkVersion": "0.8/9",
        "masRealApplication": "I'm not aware",
        "masDocumentation": "",
        "masTechnicalAssistance": "l.castropg@gmail.com",
        "masDependencies": "",
        "masTesting": "Yes",
        "masTestingResources": "",
        "masSoftwareEngineeringApproach": "Prometheus",
        "masPrimaryPaper": "https://www.researchgate.net/profile/Lucas-Souza-De-Castro/publication/325541546_Developing_a_smart_parking_solution_based_on_a_Holonic_Multiagent_System_using_JaCaMo_Framework/links/5b1424bd0f7e9b498108db62/Developing-a-smart-parking-solution-based-on-a-Holonic-Multiagent-System-using-JaCaMo-Framework.pdf",
        "masSecondaryPaper": "",
        "comments": "A bigger paper is being prepared to explain further details and tests. The MAS was developed through my Masters degree. Here is the thesis link (Portuguese version - https://repositorio.utfpr.edu.br/jspui/bitstream/1/3829/1/PG_PPGCC_M_Castro%2C%20Lucas%20Fernando%20Souza%20de_2018.pdf)"
    },
    {
        "frameworkMasExtension": 2,
        "projectName": "2COMM",
        "description": "2COMM is a framework for defining social relationships, represented as social commitments, among parties, conceived as autonomous agents. 2COMM allows to decouple interaction design from agent design and provides to  the agents the infrastructure to concretely instantiate and manipulate commitments within the scope of interaction protocols. Currently, two adapters have been developed for allowing the use of 2COMM within the JADE and JaCaMo multi-agent platforms",
        "projectType": "Agent-oriented software engineering",
        "keyPhrases": [
            "2COMM allows to decouple interaction design from agent design and provides to  the agents the infrastructure to concretely instantiate and manipulate commitments within the scope of interaction protocols.",
            "Currently, two adapters have been developed for allowing the use of 2COMM within the JADE and JaCaMo multi-agent platforms.",
            "",
            ""
        ],
        "extensionURL": "http://di.unito.it/2comm",
        "extensionCommunityAvailability": "Yes, the source code is available",
        "extensionPreviousVersionsAvailability": "No",
        "extensionPreviousVersionsURL": "",
        "extensionLicense": "Open source",
        "extensionListOfBugs": "No",
        "extensionOfFramework": "JADE version 4.2\nJaCaMo version 0.6",
        "extensionLinkToExtendedFramework": "https://jade.tilab.com/\nhttp://jacamo.sourceforge.net/",
        "extensionRealApplication": "No",
        "extensionDocumentation": "Demos;Articles;",
        "extensionTechnicalAssistance": "https://sourceforge.net/projects/twocomm/support",
        "extensionDependecies": "",
        "extensionTesting": "Yes",
        "extensionTestingResources": "",
        "extensionSoftwareEngineeringApproach": "",
        "extensionPrimaryPaper": "https://content.iospress.com/articles/fundamenta-informaticae/fi1656",
        "extensionSecondaryPaper": "https://dl.acm.org/doi/10.1145/2677206",
        "comments": "The extension was developed and is maintained by Matteo Baldoni, Cristina Baroglio, Federico Capuzzimati, Roberto Micalizio and Stefano Tedeschi"
    },
    {
        "frameworkMasExtension": 2,
        "projectName": "JaCaMo+Accountability",
        "description": "The work proposes an extension of JaCaMo with the notion of accountability, grounded on responsibility, that supports the development of robust distributed systems. The framework allows agents in an organization to keep a right level of situational awareness, through the introduction of the means for gathering and propagating accounts, upon which actions can be taken. The proposal is based on a formalization of accountability that encompasses both a normative and a structural dimension. Organization designers can specify accountability agreements among role player agents, encoding when an account request is legitimate and what kind of information should be made available in response. JaCaMo normative system is leveraged to enforce the accountability mechanism by relying on dedicated (accounting) goals and norms",
        "projectType": "Agent-oriented software engineering",
        "keyPhrases": [
            "The framework allows agents in an organization to keep a right level of situational awareness, through the introduction of the means for gathering and propagating accounts, upon which actions can be taken.",
            "The proposal is based on a formalization of accountability that encompasses both a normative and a structural dimension.",
            "Organization designers can specify accountability agreements among role player agents, encoding when an account request is legitimate and what kind of information should be made available in response.",
            "JaCaMo\u2019s normative system is leveraged to enforce the accountability mechanism by relying on dedicated (accounting) goals and norms."
        ],
        "extensionURL": "http://di.unito.it/moiseaccountability",
        "extensionCommunityAvailability": "Yes, the source code is available",
        "extensionPreviousVersionsAvailability": "No",
        "extensionPreviousVersionsURL": "",
        "extensionLicense": "Open source",
        "extensionListOfBugs": "No",
        "extensionOfFramework": "JaCaMo version 1.0",
        "extensionLinkToExtendedFramework": "http://jacamo.sourceforge.net/",
        "extensionRealApplication": "No",
        "extensionDocumentation": "Demos;Articles;",
        "extensionTechnicalAssistance": "stefano.tedeschi@unito.it",
        "extensionDependecies": "Java Development Kit, Gradle",
        "extensionTesting": "Yes",
        "extensionTestingResources": "",
        "extensionSoftwareEngineeringApproach": "",
        "extensionPrimaryPaper": "https://dl.acm.org/doi/10.5555/3463952.3463975",
        "extensionSecondaryPaper": "https://ieeexplore.ieee.org/document/9547828",
        "comments": "The extension was developed and is maintained by Matteo Baldoni, Cristina Baroglio, Roberto Micalizio and Stefano Tedeschi"
    },
    {
        "frameworkMasExtension": 2,
        "projectName": "JaCaMo+Exceptions",
        "description": "The library is an extension of Moise, the organizational model and infrastructure adopted in JaCaMo, that explicitly encompasses the notion of exception as a first-class element in the design of a multi-agent organization. An exception handling mechanism is provided, that is seamlessly integrated with organizational concepts, such as responsibilities, goals and norms. The infrastructure allows a designer to specify, besides responsibilities for organizational goals, also responsibilities for managing exceptions, that is, for providing feedback about the context in which exceptions occur, and for handling it.",
        "projectType": "Agent-oriented software engineering",
        "keyPhrases": [
            "An exception handling mechanism is provided, that is seamlessly integrated with organizational concepts, such as responsibilities, goals and norms.",
            "The infrastructure allows a designer to specify, besides responsibilities for organizational goals, also responsibilities for managing exceptions, that is, for providing feedback about the context in which exceptions occur, and for handling it.",
            "",
            ""
        ],
        "extensionURL": "http://di.unito.it/moiseexceptions",
        "extensionCommunityAvailability": "Yes, the source code is available",
        "extensionPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "extensionPreviousVersionsURL": "",
        "extensionLicense": "Open source",
        "extensionListOfBugs": "No",
        "extensionOfFramework": "JaCaMo version 1.0",
        "extensionLinkToExtendedFramework": "http://jacamo.sourceforge.net/",
        "extensionRealApplication": "No",
        "extensionDocumentation": "Demos;PhD Thesis;",
        "extensionTechnicalAssistance": "https://sourceforge.net/projects/moise-exceptions/support",
        "extensionDependecies": "Java Development Kit, Gradle",
        "extensionTesting": "Yes",
        "extensionTestingResources": "",
        "extensionSoftwareEngineeringApproach": "",
        "extensionPrimaryPaper": "http://www.di.unito.it/~tedeschi/docs/Thesis_Stefano_Tedeschi-REVISED.pdf",
        "extensionSecondaryPaper": "https://dl.acm.org/doi/10.5555/3463952.3464226",
        "comments": "The extension was developed and is maintained by Matteo Baldoni, Cristina Baroglio, Roberto Micalizio and Stefano Tedeschi"
    },
    {
        "frameworkMasExtension": 0,
        "projectName": "PADE Python Agent Development Framework",
        "description": "MAS development framework in Python",
        "projectType": "Agent-oriented software engineering",
        "keyPhrases": [
            "Agents",
            "Reactive agents",
            "Multiagent system",
            ""
        ],
        "frameworkURL": "https://github.com/grei-ufc/pade",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "frameworkPreviousVersionsURL": "",
        "frameworkLicense": "MIT",
        "frameworkListOfBugs": "Yes",
        "frameworkRealApplication": "Some Brazilian universites like UFC, UFPA, UFSC, and UERGS.",
        "frameworkDocumentation": "",
        "frameworkTechnicalAssistance": "Not yet",
        "frameworkDependencies": "The file setup.py lists the required libraries to build PADE.",
        "frameworkTesting": "No",
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "",
        "frameworkPrimaryPaper": "https://doi.org/10.1002/2050-7038.12012",
        "frameworkSecondaryPaper": "",
        "frameworkMasBuiltUsingFramework": "no",
        "comments": ""
    },
    {
        "frameworkMasExtension": 0,
        "projectName": "AgentScript Cross-Compiler (ASC2)",
        "description": "BDI Framework. KEYWORDS: Agent-Based Programming, Cross-Compiler",
        "projectType": "Agent-oriented software engineering, compiler",
        "keyPhrases": [
            "Agent-Based Programming",
            "Cross-Compiler",
            "",
            ""
        ],
        "frameworkURL": "https://github.com/mostafamohajeri/agentscript",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "frameworkPreviousVersionsURL": "",
        "frameworkLicense": "Apache-2.0",
        "frameworkListOfBugs": "Yes",
        "frameworkRealApplication": "TNO Netherlands, Asser Institute: using for system modelling (Academic level)",
        "frameworkDocumentation": "",
        "frameworkTechnicalAssistance": "m.mohajeriparizi@uva.nl",
        "frameworkDependencies": "Java 11+, sbt, Scala",
        "frameworkTesting": "Yes",
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "Actor-oriented programming using AKKA + mostly agile",
        "frameworkPrimaryPaper": "https://dl.acm.org/doi/abs/10.1145/3427760.3428339",
        "frameworkSecondaryPaper": "https://link.springer.com/chapter/10.1007/978-3-030-97457-2_15",
        "frameworkMasBuiltUsingFramework": "Yes",
        "comments": ""
    },
    {
        "frameworkMasExtension": 0,
        "projectName": "DALI",
        "description": "DALI is a Prolog extension language framework to develop Intelligent Multi Agent Systems. DALI is a meta interpreter built on top of Sicstus Prolog. It can be interfaced with many message broker systems for distributed application development. DALI agents are able to learn, either via deep learning or by learning from other trusted agents. This in order to enlarge the set of perceptions they can recognize, elaborate on and react to, and in order to expand their range of expertise",
        "projectType": "Agent-oriented software engineering, framework",
        "keyPhrases": [
            "DALI is a meta interpreter built on top of Sicstus Prolog",
            "DALI can be interfaced with many message broker systems for distributed application development",
            "DALI is a logic programming agent-oriented language",
            "DALI agents are able to learn, either via \u201cdeep\u201d learning or by learn- ing from other trusted agents. This in order to enlarge the set of perceptions they can recognize, elaborate on and react to, and in order to expand their range of expertise."
        ],
        "frameworkURL": "https://github.com/AAAI-DISIM-UnivAQ/DALI",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "frameworkPreviousVersionsURL": "",
        "frameworkLicense": "Apache License",
        "frameworkListOfBugs": "Yes",
        "frameworkRealApplication": "SPEE Srl, L'Aquila, remote Internet of Things sensor network monitoring",
        "frameworkDocumentation": "",
        "frameworkTechnicalAssistance": "giovanni.degasperis@univaq.it",
        "frameworkDependencies": "Sicstus Prolog Interpreter 4.4.x",
        "frameworkTesting": "Yes",
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "",
        "frameworkPrimaryPaper": "https://github.com/AAAI-DISIM-UnivAQ/DALI/blob/master/docs/DALI_Language_description.pdf",
        "frameworkSecondaryPaper": "https://people.disim.univaq.it/stefcost/pubbls/Dali_References.pdf",
        "frameworkMasBuiltUsingFramework": "https://github.com/AAAI-DISIM-UnivAQ/ASP_DALI",
        "comments": "Help is needed to port the DALI framework to open source Prolog interpreters"
    },
    {
        "frameworkMasExtension": 0,
        "projectName": "MatchU.ai",
        "description": "Platform for decision making and resource allocation  as for education and learning of matching algorithms. KEYWORDS: Fairness",
        "projectType": "Decision making",
        "keyPhrases": [
            "Resource allocation",
            "Fairness",
            "",
            ""
        ],
        "frameworkURL": "http://www.matchu.ai/",
        "frameworkCommunityAvailability": "Not yet, but the developers plan to make it available soon.",
        "frameworkPreviousVersionsAvailability": "No",
        "frameworkPreviousVersionsURL": "",
        "frameworkLicense": "",
        "frameworkListOfBugs": "No",
        "frameworkRealApplication": "Many educators have contacted the developers expressing that they are using the platform in teaching undergrad and graduate classes.",
        "frameworkDocumentation": "",
        "frameworkTechnicalAssistance": "",
        "frameworkDependencies": "",
        "frameworkTesting": "Yes",
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "Prototyping\nAgile development",
        "frameworkPrimaryPaper": "https://ojs.aaai.org//index.php/AAAI/article/view/7090",
        "frameworkSecondaryPaper": "",
        "frameworkMasBuiltUsingFramework": "No",
        "comments": ""
    },
    {
        "frameworkMasExtension": 0,
        "projectName": "JADE",
        "description": "JADE (Java Agent Development Framework) is a software framework to make easy the development of multi-agent applications in compliance with the FIPA specifications. JADE can then be considered a middle-ware that implements an efficient agent platform and supports the development of multi agent systems. JADE agent platform tries to keep high the performance of a distributed agent system implemented with the Java language.",
        "projectType": "Agent-oriented software engineering, framework",
        "keyPhrases": [
            " ",
            " ",
            "",
            ""
        ],
        "frameworkURL": "https://jade.tilab.com/download/jade/",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "frameworkPreviousVersionsURL": "",
        "frameworkLicense": "GNU LESSER GENERAL PUBLIC LICENSE",
        "frameworkListOfBugs": "No",
        "frameworkRealApplication": "Yes",
        "frameworkDocumentation": "",
        "frameworkTechnicalAssistance": "No",
        "frameworkDependencies": "Yes",
        "frameworkTesting": "No",
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "Partially",
        "frameworkPrimaryPaper": "Developing multi-agent systems with a FIPA-compliant agent framework. Fabio Bellifemine, Agostino Poggi and Giovanni Rimassa - Software practice & Experience",
        "frameworkSecondaryPaper": "JADE: A software framework for developing multi-agent applications. Lessons learned F Bellifemine, G Caire, A Poggi, G Rimassa Information and Software technology 50 (1-2), 10-21",
        "frameworkMasBuiltUsingFramework": "Several papers describe MAS built using Jade",
        "comments": ""
    },
    {
        "frameworkMasExtension": 0,
        "projectName": "StreamB",
        "description": "StreamB: a declarative language for automatically processing data streams in abstract environments for agent platforms",
        "projectType": "Agent-oriented software engineering, programming language, verification",
        "keyPhrases": [
            " ",
            " ",
            "",
            ""
        ],
        "frameworkURL": "https://github.com/autonomy-and-verification-uol/StreamB",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "frameworkPreviousVersionsURL": "",
        "frameworkLicense": "GNU LESSER GENERAL PUBLIC LICENSE",
        "frameworkListOfBugs": "No",
        "frameworkRealApplication": "No",
        "frameworkDocumentation": "",
        "frameworkTechnicalAssistance": "GitHub issues on the repository",
        "frameworkDependencies": "Self-contained",
        "frameworkTesting": "Yes",
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "",
        "frameworkPrimaryPaper": "https://dl.acm.org/doi/abs/10.1007/978-3-030-97457-2_7",
        "frameworkSecondaryPaper": "",
        "frameworkMasBuiltUsingFramework": "",
        "comments": ""
    },
    {
        "frameworkMasExtension": 1,
        "projectName": "AdaptSchedule",
        "description": "Distributed constraint satisfaction. KEYWORDS: Activity scheduling, Decision support",
        "projectType": "Agent-oriented software engineering, decision support",
        "keyPhrases": [
            "Activity scheduling",
            "Decision support",
            "",
            ""
        ],
        "masURL": "https://github.com/EdDurfee/adaptSchedule",
        "masCommunityAvailability": "Yes, the source code is available",
        "masPreviousVersionsAvailability": "No",
        "masPreviousVersionsURL": "",
        "masLicense": "open source",
        "masListOfBugs": "Yes",
        "masDevelopedWithFramework": "None",
        "masLinkToFramework": "None",
        "masFrameworkVersion": "None",
        "masRealApplication": "No",
        "masDocumentation": "",
        "masTechnicalAssistance": "No",
        "masDependencies": "",
        "masTesting": "Yes",
        "masTestingResources": "",
        "masSoftwareEngineeringApproach": "",
        "masPrimaryPaper": "Edmund H. Durfee, Lynn H. Garrett, and Abigail Johnson. Promoting Independence with a Schedule Management Assistant that Anticipates Disruptions, Journal of Healthcare Informatics Research 4:19-49, 2020.",
        "masSecondaryPaper": "",
        "comments": ""
    },
    {
        "frameworkMasExtension": 0,
        "projectName": "JaCaMo",
        "description": "Development framework for MAS that considers agent, communication, environment, and organisation dimensions. KEYWORDS: Jason, CArtAgO, Moise",
        "projectType": "Agent-oriented software engineering, framework",
        "keyPhrases": [
            "Considers agent, communication, environment, and organisation dimensions",
            "Jason, Cartago, Moise",
            "",
            ""
        ],
        "frameworkURL": "http://jacamo.sourceforge.net",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "Yes, in another repo",
        "frameworkPreviousVersionsURL": "https://github.com/jacamo-lang/jacamo",
        "frameworkLicense": "GNU LESSER GENERAL PUBLIC LICENSE",
        "frameworkListOfBugs": "Yes",
        "frameworkRealApplication": "As far as the developers know, JaCaMo is mostly used by scientists now. Regarding Jason (which is part of JaCaMo), a list of users is available at http://jason.sourceforge.net/wp/projects/",
        "frameworkDocumentation": "",
        "frameworkTechnicalAssistance": "Community based support is provided, mostly based on the GitHub issues",
        "frameworkDependencies": "Java is required",
        "frameworkTesting": "Yes",
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "Nothing remarkable.",
        "frameworkPrimaryPaper": "Olivier Boissier, Rafael H. Bordini, Jomi H\u00fcbner, and Alessandro Ricci. Multi-Agent Oriented Programming: Programming Multi-Agent Systems Using JaCaMo. MIT Press, 2020. ",
        "frameworkSecondaryPaper": "Olivier Boissier, Rafael H. Bordini, Jomi F. H\u00fcbner, and Alessandro Ricci. Dimensions in programming multi-agent systems. The Knowledge Engineering Review, 34, 2019. ",
        "frameworkMasBuiltUsingFramework": "No",
        "comments": ""
    },
    {
        "frameworkMasExtension": 0,
        "projectName": "CellNet",
        "description": "Java framework for simulating complex adaptive systems by means of multi-agent systems. Simulations consider the use of serveral models, including evolutionary game theory, self-organization and cellular automata. Simulation also consider the use of complex networks, including: spatial, small-world, scale-free and random nets.",
        "projectType": "Agent-based simulation",
        "keyPhrases": [
            "Simulations consider the use of serveral models, including evolutionary game theory, self-organization and cellular automata.",
            "Simulation also consider the use of complex networks, including: spatial, small-world, scale-free and random nets.",
            "",
            ""
        ],
        "frameworkURL": "https://github.com/jcburguillo/CellNet",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "frameworkPreviousVersionsURL": "",
        "frameworkLicense": "GNU LESSER GENERAL PUBLIC LICENSE",
        "frameworkListOfBugs": "No",
        "frameworkRealApplication": "By now, just a few researchers and postdocs.",
        "frameworkDocumentation": "",
        "frameworkTechnicalAssistance": "https://github.com/jcburguillo",
        "frameworkDependencies": "Self-contained",
        "frameworkTesting": "Yes",
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "AGILE",
        "frameworkPrimaryPaper": "Juan C. Burguillo. Self-organizing Coalitions for Managing Complexity. In Emergence, Complexity and Computationbook series (ECC, volume 29). Editorial Springer Nature, 1st ed. 2018. Available at: https://www.google.com/url?q=https%3A%2F%2Fwww.dpbolvw.net%2Fclick-8725405-12898971%3Furl%3Dhttps%253A%252F%252Fwww.springer.com%252Fgp%252Fbook%252F9783319698960&sa=D&sntz=1&usg=AOvVaw04mS6_Qh99p8cnQxTH0kEi",
        "frameworkSecondaryPaper": "",
        "frameworkMasBuiltUsingFramework": "Yes",
        "comments": "The framework includes the simulations described in the book."
    },
      {
        "frameworkMasExtension": 0,
        "projectName": "JaKtA",
        "description": "JaKtA is a framework for developing BDI multi-agent systems using a Kotlin internal DSL. Its main goal is to make Agent-Oriented Programming and the BDI paradigm more accessible for mainstream developers, blending with other programming paradigms. JaKtA focuses on pluggability of different components, including management of agent concurrent execution",
        "projectType": "Agent-oriented software engineering, framework",
        "keyPhrases": [
            "Making the BDI paradigm more accessible",
            "Pluggability of different components",
            "Concurrent execution",
            "BDI, Kotlin"
        ],
        "frameworkURL": "https://github.com/jakta-bdi/jakta",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "frameworkPreviousVersionsURL": "",
        "frameworkLicense": "Apache-2.0",
        "frameworkListOfBugs": "Yes",
        "frameworkRealApplication": "Not at the moment, apart from developers",
        "frameworkDocumentation": "Documentation will be available at https://jakta-bdi.github.io/",
        "frameworkTechnicalAssistance": "https://github.com/orgs/jakta-bdi/discussions/categories/q-a",
        "frameworkDependecies": "Java 11+, (preferably also Kotlin dev tools)",
        "frameworkTesting": "Yes, a systematic testing following some recognized testing methodology/approach was performed and the testing resources (test cases, etc) are available in the public repository;",        
        "frameworkTestingResources": "Available in the main repository, under each module",
        "frameworkSoftwareEngineeringApproach": "",
        "frameworkPrimaryPaper": "Baiardi, M., Burattini, S., Ciatto, G., Pianini, D. Blending BDI Agents with Object-Oriented and Functional Programming with JaKtA. SN COMPUT. SCI. 5, 1003 (2024). https://doi.org/10.1007/s42979-024-03244-y",
        "frameworkSecondaryPaper": "",
        "frameworkMasBuiltUsingFramework":"Yes",
        "comments": "Some examples of use can be found in https://github.com/jakta-bdi/jakta-examples"
     },
      {
        "frameworkMasExtension": 0,
        "projectName": "SARL",
        "description": "SARL is a general purpose agent oriented programming language that provides specific constructs for multiagent systems and holonic multiagent systems. SARL aims at providing the fundamental abstractions for dealing with concurrency, distribution, interaction, decentralization, reactivity, autonomy and dynamic reconfiguration. The associated runtime environment, named Janus, enables to deploy the agents even on a computer network with a zero-configuration approach. SARL compiler generates Java and Python code that could be directly used or invoked from a Java or Python application. SARL is architecture agnostic. You could implement your preferred agent architecture (BDI, reactive, etc...) and interaction mechanism (events, messages, BSPL protocols, etc.)",
        "projectType": "Agent-oriented software engineering, programming language",
        "keyPhrases": [
            "Concurrency, distribution, interaction, decentralization, reactivity, autonomy and dynamic reconfiguration.",
            "Zero-configuration approach.",
            "Java, Python",
            "architecture agnostic"
        ],
        "frameworkURL": "http://www.sarl.io/",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "frameworkPreviousVersionsURL": "https://github.com/sarl/sarl",
        "frameworkLicense": "Apache-2.0",
        "frameworkListOfBugs": "Yes",
        "frameworkRealApplication": "Aptitude (Belgium): holonic camera sensor network; X Plan Research (France): predictive nuclear central maintenance; Thipisee (France): agentification of smart phone applications; OPM (France): pathway discovery in oncology; Univ. Toulouse (France): Adaptive Multi-Agent Systems for Dynamic Big Data Analytics; Zayed Univ. (Dubai): Simulation of road traffic and connected infrastructure;  Zayed Univ. (Dubai): Confort and energy management of smart buildings; RMIT (Australia): Elevator control",
        "frameworkDocumentation": "Tutorials; Demos; Courses; Manuals",
        "frameworkTechnicalAssistance": "stephane.galland@utbm.fr",
        "frameworkDependecies": "",
        "frameworkTesting": "Yes, a systematic testing following some recognized testing methodology/approach was performed and the testing resources (test cases, etc) are available in the public repository;",        
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "SARL and Janus are fully implemented using the MDE approach, and the Eclipse Ecore framework. Additionally, SARL is a possible implementation of the ASPECS agent-oriented software engineering (www.aspecs.org).",
        "frameworkPrimaryPaper": "Rodriguez, S., Gaud, N., & Galland, S. (2014). SARL: a general-purpose agent-oriented programming language. The 2014 IEEE/WIC/ACM International Conference on Intelligent Agent Technology",
        "frameworkSecondaryPaper": "Galland, S., Rodriguez, S., & Gaud, N. (2020). Run-time Environment for the SARL Agent-Programming Language: the Example of the Janus platform. International Journal on Future Generation Computer Systems. https://doi.org/10.1016/j.future.2017.10.020",
        "frameworkMasBuiltUsingFramework": "Some examples of publically available projects are listed on http://www.sarl.io/community/index.html",
        "comments": ""
     },
      {
        "frameworkMasExtension": 2,
        "projectName": "jasonEmbedded",
        "description": "jasonEmbedded is an extension of the Jason framework for developing Embedded MAS with BDI agents capable of controlling hardware, communicating, and moving between IoT devices capable of dealing with fault tolerance. KEYWORDS: Internet of Things, Multi-agent Systems, Edge Computing, Embedded Multi-agent Systems, Real-World Multi-agent System",
        "projectType": "Agent-oriented software engineering",
        "keyPhrases": [
            "",
            "",
            "",
            ""
        ],
        "extensionURL": "https://jasonembedded.chon.group/",
        "extensionCommunityAvailability": "Yes, the source code is available",
        "extensionPreviousVersionsAvailability": "",
        "extensionPreviousVersionsURL": "",
        "extensionLicense": "CC-BY-4.0",
        "extensionListOfBugs": "Yes",
        "extensionOfFramework": "Jason, latest version",
        "extensionLinkToExtendedFramework": "https://jason-lang.github.io/",
        "extensionRealApplication": "No",
        "extensionDocumentation": "Tutorials; Courses",
        "extensionTechnicalAssistance": "chon@grupo.cefet-rj.br",
        "extensionDependecies": "",
        "extensionTesting": "Yes",
        "extensionTestingResources": "Yes, in the same repo",
        "extensionSoftwareEngineeringApproach": "",
        "extensionPrimaryPaper": "https://doi.org/10.1007/978-3-031-45368-7_25",
        "extensionSecondaryPaper": "",
        "comments": ""
    },
       {
        "frameworkMasExtension": 2,
        "projectName": "Velluscinum",
        "description": "Velluscinum uses digital assets as a factor of agreement in the relationship between cognitive agents using the Belief-Desire-Intention (BDI) model. Adopting Distributed Ledger Technologies (DLT) technologies in MAS can facilitate the agreement between agents, taking what is registered in the Ledger as accurate, and also can be helpful to manage trust relationships, open MAS, and distributed scenarios. KEYWORDS: Middleware, Digital Ledger Technology, Multi-agent Systems, Blockchain, Digital Asset",
        "projectType": "Agent-oriented software engineering",
        "keyPhrases": [
            "",
            "",
            "",
            ""
        ],
        "extensionURL": "https://velluscinum.chon.group/",
        "extensionCommunityAvailability": "Yes, the source code is available",
        "extensionPreviousVersionsAvailability": "Yes, available in the same repo of the current version",
        "extensionPreviousVersionsURL": "",
        "extensionLicense": "CC-BY-4.0",
        "extensionListOfBugs": "Yes",
        "extensionOfFramework": "JaCaMo, Jason, latest version",
        "extensionLinkToExtendedFramework": "https://jason-lang.github.io/, https://jacamo-lang.github.io/",
        "extensionRealApplication": "Prof Dr. Gleifer Alves (LaCA - Intelligent Systems) at https://laca-is.github.io/",
        "extensionDocumentation": "Tutorials; Videos; Demos",
        "extensionTechnicalAssistance": "chon@grupo.cefet-rj.br",
        "extensionDependecies": "Jason or JaCaMo",
        "extensionTesting": "Yes",
        "extensionTestingResources": "Yes, in the same repo",
        "extensionSoftwareEngineeringApproach": "",
        "extensionPrimaryPaper": "https://doi.org/10.1007/978-3-031-37616-0_17",
        "extensionSecondaryPaper": "",
        "comments": ""
    },
        {
        "frameworkMasExtension": 2,
        "projectName": "ARGO",
        "description": "ARGO is a customized agent architecture for programming embedded robotic agents using Jason or JaCaMo Framework. KEYWORDS: Embedded multi-agent systems, Internet of Things, Edge Computing, Real-world Multi-agent Systems, Embodied Agents",
        "projectType": "Agent-oriented software engineering",
        "keyPhrases": [
            "",
            "",
            "",
            ""
        ],
        "extensionURL": "https://argo.chon.group/",
        "extensionCommunityAvailability": "Yes, the source code is available",
        "extensionPreviousVersionsAvailability": "Yes, in another location",
        "extensionPreviousVersionsURL": "https://sourceforge.net/projects/argo-for-jason/",
        "extensionLicense": "CC-BY-4.0",
        "extensionListOfBugs": "Yes",
        "extensionOfFramework": "JaCaMo, Jason, latest version",
        "extensionLinkToExtendedFramework": "https://jason-lang.github.io/, https://jacamo-lang.github.io/",
        "extensionRealApplication": "",
        "extensionDocumentation": "Tutorials; Videos",
        "extensionTechnicalAssistance": "chon@grupo.cefet-rj.br",
        "extensionDependecies": "Jason or JaCaMo",
        "extensionTesting": "Yes",
        "extensionTestingResources": "Yes, in the repo",
        "extensionSoftwareEngineeringApproach": "",
        "extensionPrimaryPaper": "https://doi.org/10.1007/978-3-319-50983-9_8",
        "extensionSecondaryPaper": "https://link.springer.com/chapter/10.1007/978-3-031-55326-4_3",
        "comments": ""
    }, 
    {
        "frameworkMasExtension": 0,
        "projectName": "chonIDE",
        "description": "chonIDE is an IDE to develop Embedded MAS that centralizes the entire development in a single IDE with all required integrations and configurations done. Moreover, the embedding and monitoring MAS of the IDE are done remotely without physical wired connections. KEYWORDS: Embedded Multi-agent System, Development, Integrated Development Environments, Multi-agent System, Internet of Things",
        "projectType": "Agent-oriented software engineering, IDE",
        "keyPhrases": [
            "",
            "",
            "",
            ""
        ],
        "frameworkURL": "https://chonide.chon.group/",
        "frameworkCommunityAvailability": "Yes, the source code is available",
        "frameworkPreviousVersionsAvailability": "No",
        "frameworkPreviousVersionsURL": "",
        "frameworkLicense": "CC-BY-4.0",
        "frameworkListOfBugs": "Yes",
        "frameworkRealApplication": "",
        "frameworkDocumentation": "Tutorials; Courses; Videos",
        "frameworkTechnicalAssistance": "chon@grupo.cefet-rj.br",
        "frameworkDependecies": "",
        "frameworkTesting": "Yes, a systematic testing following some recognized testing methodology/approach was performed and the testing resources (test cases, etc) are available in the public repository;",        
        "frameworkTestingResources": "",
        "frameworkSoftwareEngineeringApproach": "",
        "frameworkPrimaryPaper": "http://dx.doi.org/10.1007/978-3-031-37616-0_29",
        "frameworkSecondaryPaper": "",
        "frameworkMasBuiltUsingFramework": "",
        "comments": ""
     },
      {
        "frameworkMasExtension": 1,
        "projectName": "MA-STONKSpp",
        "description": "Integration of MAS concepts into an energy prosumer simulation tool to model decentralized peer-to-peer (P2P) electricity trading. KEYWORDS: P2P electricity trading; BDI-based prosumer model",
        "projectType": "Agent-based simulation",
        "keyPhrases": [
            "BDI-based prosumer model",
            "P2P electricity trading"
        ],
        "masURL": "https://github.com/MAS-UniGe/MA-STONKSpp",
        "masCommunityAvailability": "Yes, the source code is available",
        "masPreviousVersionsAvailability": "No",
        "masPreviousVersionsURL": "",
        "masLicense": "MIT",
        "masListOfBugs": "No",
        "masDevelopedWithFramework": "Mosaik, Jason, Python-agentspeak, Mango",
        "masLinkToFramework": "https://jason-lang.github.io/ 3.30; https://github.com/niklasf/python-agentspeak",
        "masFrameworkVersion": "",
        "masRealApplication": "None",
        "masDocumentation": "The project report",
        "masTechnicalAssistance": "None",
        "masDependencies": "No third-party tool: STONKSpp is dockerized, the rest depends only on the platform",
        "masTesting": "Yes, some tests were performed but no testing resources exist",
        "masTestingResources": "",
        "masSoftwareEngineeringApproach": "No",
        "masPrimaryPaper": "The MAS is described in the report availble in the GitHub repo. The project is about integrating Multi-Agent Systems (MAS) concepts into an energy prosumer simulation tool to model decentralized peer-to-peer (P2P) electricity trading. OBJECTIVE: The project aims to transition an existing energy prosumer network simulator towards a Belief-Desire-Intention (BDI) multi-agent architecture. CURRENT STATE: The existing simulator (STONKSpp) models prosumer energy trading but lacks a strong multi-agent system (MAS) framework. ENHANCEMENTS PROPOSED: Implement a BDI-based prosumer model. Develop communication protocols among agents using a message-passing paradigm. Compare implementations using python-agentspeak and Jason. Attempt integration with the Mango MAS framework to improve interaction capabilities. TECHNOLOGY USED: Mosaik & OMNeT++ for co-simulation. Python-agentspeak and Jason for agent modeling. Cosima & Mango to simulate realistic decentralized MAS behaviors. CHALLENGES: Moving from centralized optimization to fully distributed decision-making. Handling dynamic neighbor discovery and adapting to network conditions. Ensuring scalability and real-world applicability.",
        "masSecondaryPaper": "None",
        "comments": ""
    },
   {
        "frameworkMasExtension": 1,
        "projectName": "SmartFarmJADE",
        "description": "The MAS simulates how autonomous agents may handle the crops of a farm. KEYWORDS: smart farming; simulation; drones; tractors; robots; bidimensional grid",
        "projectType": "Agent-based simulation",
        "keyPhrases": [
            "smart farming",
            "JADE"
        ],
        "masURL": "https://github.com/MAS-UniGe/SmartFarmJADE/",
        "masCommunityAvailability": "Yes, the source code is available",
        "masPreviousVersionsAvailability": "No",
        "masPreviousVersionsURL": "",
        "masLicense": "MIT",
        "masListOfBugs": "No",
        "masDevelopedWithFramework": "Jade",
        "masLinkToFramework": " https://jade.tilab.com 4.6.0",
        "masFrameworkVersion": "",
        "masRealApplication": "None",
        "masDocumentation": "The project report",
        "masTechnicalAssistance": "gabriele.dellepere@gmail.com",
        "masDependencies": "java JADE: https://jade.tilab.com/download/jade/license/jade-download/, ELKI Data Mining: https://elki-project.github.io/releases/",
        "masTesting": "Yes, some tests were performed but no testing resources exist",
        "masTestingResources": "",
        "masSoftwareEngineeringApproach": "No",
        "masPrimaryPaper": "The MAS is described by a report in the docs folder of the project. It simulates an agricultural environment where autonomous agents handle the crops. The agents are drones, robots and self-driving tractors, and each of them covers a different role in maintaining the crops well being and maximizing the land yield. The amount of agent instances and the map size are configurable.",
        "masSecondaryPaper": "None",
        "comments": ""
    },
    {
        "frameworkMasExtension": 1,
        "projectName": "DungeonCrawler",
        "description": "Agent-based Dungeon Crawler with NLP Integration. KEYWORDS: Rasa-Jade integration; chatbot; dungeon crawler; immersive game experience; autonomous enemies and real-time player assistance",
        "projectType": "Agent-oriented software engineering",
        "keyPhrases": [
            "dungeon",
            "JADE",
            "chatbot"
        ],
        "masURL": "https://github.com/MAS-UniGe/DungeonCrawler",
        "masCommunityAvailability": "Yes, the source code is available",
        "masPreviousVersionsAvailability": "No",
        "masPreviousVersionsURL": "",
        "masLicense": "GPL",
        "masListOfBugs": "No",
        "masDevelopedWithFramework": "Jade",
        "masLinkToFramework": " https://jade.tilab.com 4.6.0",
        "masFrameworkVersion": "",
        "masRealApplication": "None",
        "masDocumentation": "The project report",
        "masTechnicalAssistance": "None",
        "masDependencies": "",
        "masTesting": "No",
        "masTestingResources": "",
        "masSoftwareEngineeringApproach": "No",
        "masPrimaryPaper": "The MAS is described by a report in the docs folder of the project. The project involves a Multi-Agent System (MAS) within a dungeon crawler application. The problem it addresses is providing an engaging, dynamic dungeon experience where the user must strategically defeat enemies and navigate through rooms while receiving assistance from a chatbot. The user must conquer each room, defeating all enemies to progress to the next one. The rooms contain power-ups that enhance health, defense, or attack power. The final room features a boss, which is significantly stronger than standard enemies and possesses a unique special attack. The chatbot, integrated via Rasa, should provide guidance but it's just demonstrative as of now.   The agents within the system consist of the standard enemies and a boss. The player has fixed attributes for health, attack power, and defense, and can execute both melee and ranged attacks. The enemy agents share similar attributes but act automatically. There are four instances of standard enemies, and one instance of a boss. The enemies have predefined communication patterns to facilitate cooperation, such as alerting others when the player is spotted or requesting reinforcements when they need help. Additionally, when an enemy’s health drops below a certain threshold, it may attempt to retreat and seek a power-up, which introduces a tactical element to their behavior.   The integration of the chatbot adds another layer of interaction, allowing the user to receive real-time assistance and guidance.  This Multi-Agent System design emphasizes the dynamic interactions between agents and the chatbot’s support in creating a more engaging dungeon crawler experience.",
        "masSecondaryPaper": "None",
        "comments": ""
    }, 
    {
        "frameworkMasExtension": 1,
        "projectName": "Hegemony set-up",
        "description": "This MAS simulates the set-up process of a strategic tabletop game (Hegemony). KEYWORDS: Hegemony; LLM integration",
        "projectType": "Agent-based simulation",
        "keyPhrases": [
            "dungeon",
            "JADE",
            "chatbot"
        ],
        "masURL": "https://github.com/MAS-UniGe/Hegemony",
        "masCommunityAvailability": "Yes, the source code is available",
        "masPreviousVersionsAvailability": "No",
        "masPreviousVersionsURL": "",
        "masLicense": "MIT",
        "masListOfBugs": "No",
        "masDevelopedWithFramework": "Jason 3.3.0",
        "masLinkToFramework": "https://jason-lang.github.io",
        "masFrameworkVersion": "",
        "masRealApplication": "None",
        "masDocumentation": "The project report",
        "masTechnicalAssistance": "None",
        "masDependencies": "",
        "masTesting": "Yes, some tests were performed but no testing resources exist",
        "masTestingResources": "",
        "masSoftwareEngineeringApproach": "No",
        "masPrimaryPaper": "The MAS is described by a report in the repo. The MAS addresses through simulation the practical problem of playtesting a tabletop game, a procedure that due to its nature typically requires a lot of human matches in order to find weak points in the strategic structure of the game. Each of the four agents is different in role and interact with the others in order to complete the set-up. I focused on the set-up being this project intended for a university exam, but further development can lead to a completely autonomous game environment that can provide game designers a very fast way to deal with the game balancing before publishing their product, achieving higher quality and letting them focus on more intriguing aspects of their job.",
        "masSecondaryPaper": "None",
        "comments": ""
    }
]
